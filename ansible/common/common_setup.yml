---
# Common setup tasks for all products

- name: Create temporary directory
  file:
    path: /tmp/percona_build
    state: directory
    mode: '0755'

- name: Install Common Development Tools (RedHat)
  when: os_type == "rpm"
  yum:
    name:
      - wget
      - sudo
      - git
      - make
      - cmake
      - gcc
      - gcc-c++
    state: present

- name: Install Common Development Tools (Debian)
  when: os_type == "deb"
  apt:
    name:
      - wget
      - sudo
      - git
      - make
      - cmake
      - gcc
      - g++
      - curl
    state: present
EOF

# Create Go installation task
cat > ansible/common/install_golang.yml << 'EOF'
---
# Install Go for Percona build environments

- name: Set Go architecture variable
  set_fact:
    go_arch: "{{ 'amd64' if arch == 'x86_64' else 'arm64' if arch == 'aarch64' else 'amd64' }}"
    
- name: Download Go {{ golang_version }}
  get_url:
    url: "https://downloads.percona.com/downloads/packaging/go/go{{ golang_version }}.linux-{{ go_arch }}.tar.gz"
    dest: "/tmp/golang{{ golang_version }}.tar.gz"
    
- name: Remove existing Go installations
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /usr/local/go1.22
    - /usr/local/go1.19
    - /usr/local/go1.11
    - /usr/local/go1.8
    - /usr/local/go1.9
    - /usr/local/go1.9.2
    - /usr/local/go
    
- name: Extract Go
  shell: tar --transform=s,go,go{{ golang_version }}, -zxf /tmp/golang{{ golang_version }}.tar.gz -C /usr/local
  args:
    creates: "/usr/local/go{{ golang_version }}"
    
- name: Create Go symlink
  file:
    src: "/usr/local/go{{ golang_version }}"
    dest: /usr/local/go
    state: link

- name: Set Go environment variables
  lineinfile:
    path: /home/{{ custom_user }}/.bashrc
    line: "{{ item }}"
    create: yes
  with_items:
    - 'export GOROOT="/usr/local/go"'
    - 'export GOPATH="/home/{{ custom_user }}/go"'
    - 'export PATH="/usr/local/go/bin:$PATH:$GOPATH"'
EOF

# Create AWS SDK build task
cat > ansible/common/build_aws_sdk.yml << 'EOF'
---
# Build AWS SDK for Percona products

- name: Clone AWS SDK
  git:
    repo: https://github.com/aws/aws-sdk-cpp.git
    dest: /tmp/aws-sdk-cpp
    version: 1.9.379
    
- name: Initialize AWS SDK submodules
  command: git submodule update --init --recursive
  args:
    chdir: /tmp/aws-sdk-cpp
    
- name: Patch AWS SDK for RHEL
  when: os_type == "rpm" and rhel_version in ["7", "8", "9", "2023"]
  shell: |
    sed -i 's:v0.4.42:v0.6.10:' third-party/CMakeLists.txt
    sed -i 's:"-Werror" ::' cmake/compiler_settings.cmake
  args:
    chdir: /tmp/aws-sdk-cpp
    
- name: Create AWS SDK build directory
  file:
    path: /tmp/aws-sdk-cpp/build
    state: directory
    
- name: Set up environment variables for AWS SDK build
  lineinfile:
    path: /tmp/aws-sdk-build-env.sh
    create: yes
    line: |
      export CC={{ compiler_cc | default('/opt/mongodbtoolchain/v4/bin/gcc') }}
      export CXX={{ compiler_cxx | default('/opt/mongodbtoolchain/v4/bin/g++') }}
      {% if os_name == 'jammy' or os_name == 'noble' %}
      export CMAKE_CXX_FLAGS=" -Wno-error=maybe-uninitialized -Wno-error=deprecated-declarations -Wno-error=uninitialized "
      export CMAKE_C_FLAGS=" -Wno-error=maybe-uninitialized -Wno-error=maybe-uninitialized -Wno-error=uninitialized "
      {% endif %}
    mode: 0755

- name: Build AWS SDK
  shell: |
    cd /tmp/aws-sdk-cpp/build
    source /tmp/aws-sdk-build-env.sh
    {{ 'cmake3' if os_type == 'rpm' and rhel_version == '7' else 'cmake' }} .. -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY="s3;transfer" -DBUILD_SHARED_LIBS=OFF -DMINIMIZE_SIZE=ON -DAUTORUN_UNIT_TESTS=OFF
    make -j$(nproc)
    make install
  args:
    creates: /usr/local/lib/libaws-cpp-sdk-s3.a
EOF

# Create MongoDB toolchain installation task
cat > ansible/common/install_mongodb_toolchain.yml << 'EOF'
---
# Install MongoDB Toolchain

- name: Download MongoDB Toolchain installer
  get_url:
    url: https://downloads.percona.com/downloads/TESTING/issue-CUSTO83/toolchain_installer.tar.gz
    dest: /tmp/toolchain_installer.tar.gz
    
- name: Extract toolchain installer
  unarchive:
    src: /tmp/toolchain_installer.tar.gz
    dest: /tmp
    remote_src: yes
    
- name: Install MongoDB Toolchain
  shell: |
    cd /tmp
    export USER={{ custom_user }}
    bash -x ./installer.sh -k --download-url {{ mongodb_toolchain_url }}/{{ os_name }}_mongodbtoolchain_{{ arch }}.tar.gz
  args:
    creates: /opt/mongodbtoolchain/v4/bin/gcc
